{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erocc\\\\Desktop\\\\Projects\\\\next-lambda\\\\pages\\\\ui\\\\swr\\\\[dynamic]\\\\sub.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Layout } from \"../../../components/Layout\";\nimport fetch from \"unfetch\";\nimport useSWR from 'swr';\nimport { useRouter } from \"next/router\";\n\nconst Component = () => {\n  const {\n    query: {\n      dynamic\n    }\n  } = useRouter();\n  const {\n    data,\n    error\n  } = useSWR(`http://localhost:3000/api/mock/${dynamic}`, fetcher);\n  if (error) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"failed to load\");\n  if (!data) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"loading...\");\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Dynamic Route with SubRoute SWR\"), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, JSON.stringify({\n    dynamic\n  })), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, JSON.stringify({\n    data\n  }))));\n};\n\nconst fetcher = async path => {\n  const res = await fetch(path);\n  const json = await res.json();\n  return json;\n};\n\nexport default Component;","map":{"version":3,"sources":["C:/Users/erocc/Desktop/Projects/next-lambda/pages/ui/swr/[dynamic]/sub.js"],"names":["Layout","fetch","useSWR","useRouter","Component","query","dynamic","data","error","fetcher","JSON","stringify","path","res","json"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,4BAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;AACA,SAASC,SAAT,QAA0B,aAA1B;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAM;AACJC,IAAAA,KAAK,EAAE;AAAEC,MAAAA;AAAF;AADH,MAEFH,SAAS,EAFb;AAIA,QAAM;AAAEI,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAkBN,MAAM,CAAE,kCAAiCI,OAAQ,EAA3C,EAA8CG,OAA9C,CAA9B;AAEA,MAAID,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMG,IAAI,CAACC,SAAL,CAAe;AAAEL,IAAAA;AAAF,GAAf,CAAN,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMI,IAAI,CAACC,SAAL,CAAe;AAAEJ,IAAAA;AAAF,GAAf,CAAN,CALF,CADF,CADF;AAWD,CArBD;;AAuBA,MAAME,OAAO,GAAG,MAAOG,IAAP,IAAgB;AAC9B,QAAMC,GAAG,GAAG,MAAMZ,KAAK,CAACW,IAAD,CAAvB;AACA,QAAME,IAAI,GAAG,MAAMD,GAAG,CAACC,IAAJ,EAAnB;AACA,SAAOA,IAAP;AACD,CAJD;;AAMA,eAAeV,SAAf","sourcesContent":["import { Layout } from \"../../../components/Layout\";\r\nimport fetch from \"unfetch\";\r\nimport useSWR from 'swr'\r\nimport { useRouter } from \"next/router\";\r\n\r\nconst Component = () => {\r\n  const {\r\n    query: { dynamic }\r\n  } = useRouter();\r\n\r\n  const { data, error } = useSWR(`http://localhost:3000/api/mock/${dynamic}`, fetcher)\r\n\r\n  if (error) return <div>failed to load</div>\r\n  if (!data) return <div>loading...</div>\r\n\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <h1>Dynamic Route with SubRoute SWR</h1>\r\n        <br/>\r\n        <div>{JSON.stringify({ dynamic })}</div>\r\n        <br />\r\n        <div>{JSON.stringify({ data })}</div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst fetcher = async (path) => {\r\n  const res = await fetch(path)\r\n  const json = await res.json()\r\n  return json\r\n}\r\n\r\nexport default Component;\r\n"]},"metadata":{},"sourceType":"module"}