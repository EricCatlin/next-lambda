{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar _jsxFileName = \"C:\\\\Users\\\\erocc\\\\Desktop\\\\Projects\\\\next-lambda\\\\pages\\\\ui\\\\swr\\\\sync.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { Layout } from \"../../../components/Layout\";\nimport fetch from \"unfetch\";\nimport useSWR from 'swr';\n\nvar Component = function Component() {\n  var _useSWR = useSWR(null, fetcher),\n      data = _useSWR.data,\n      error = _useSWR.error;\n\n  if (error) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"failed to load\");\n  if (!data) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"loading...\");\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Syncrounous SWR\"), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, _JSON$stringify(props))));\n};\n\nvar fetcher = function fetcher() {\n  var res, json;\n  return _regeneratorRuntime.async(function fetcher$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch('http://localhost:3000/api/mock/sync'));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          json = _context.sent;\n          return _context.abrupt(\"return\", json);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Component;","map":{"version":3,"sources":["C:/Users/erocc/Desktop/Projects/next-lambda/pages/ui/swr/sync.js"],"names":["Layout","fetch","useSWR","Component","fetcher","data","error","props","res","json"],"mappings":";;;;;AAAA,SAASA,MAAT,QAAuB,4BAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,KAAnB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AAAA,gBACED,MAAM,CAAC,IAAD,EAAOE,OAAP,CADR;AAAA,MACdC,IADc,WACdA,IADc;AAAA,MACRC,KADQ,WACRA,KADQ;;AAGtB,MAAIA,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACX,MAAI,CAACD,IAAL,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AAEX,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAM,gBAAeE,KAAf,CAAN,CAHF,CADF,CADF;AASD,CAfD;;AAiBA,IAAMH,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACIH,KAAK,CAAC,qCAAD,CADT;;AAAA;AACRO,UAAAA,GADQ;AAAA;AAAA,2CAEKA,GAAG,CAACC,IAAJ,EAFL;;AAAA;AAERA,UAAAA,IAFQ;AAAA,2CAGPA,IAHO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAhB;;AAMA,eAAeN,SAAf","sourcesContent":["import { Layout } from \"../../../components/Layout\";\r\nimport fetch from \"unfetch\";\r\nimport useSWR from 'swr'\r\n\r\nconst Component = () => {\r\n  const { data, error } = useSWR(null, fetcher)\r\n\r\n  if (error) return <div>failed to load</div>\r\n  if (!data) return <div>loading...</div>\r\n\r\n  return (\r\n    <Layout>\r\n      <div>\r\n        <h1>Syncrounous SWR</h1>\r\n        <br/>\r\n        <div>{JSON.stringify(props)}</div>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nconst fetcher = async () => {\r\n  const res = await fetch('http://localhost:3000/api/mock/sync')\r\n  const json = await res.json()\r\n  return json\r\n}\r\n\r\nexport default Component;\r\n"]},"metadata":{},"sourceType":"module"}